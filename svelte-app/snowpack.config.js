const path = require('path');

/**
 * Modify webpack config generated by snowpack
 * @param {import("webpack").Configuration} config The webpack config generated by snowpack
 */
function modifyWebpackConfig(config) {
  // Set babel targets
  const firstRule = config.module.rules[0]
  const firstUse = firstRule.use[0];
  if (!firstUse.loader.includes('babel-loader')) {
    throw new Error('tried to modify babel config but first rule was not for babel')
  }
  firstUse.options.presets[0][1].targets = ">0.25%, ie 11, not UCAndroid >0, not OperaMini all"

  // Include an entry point for the standalone component
  config.entry['use-small'] = path.resolve(__dirname, "build", "dist", "use-small.js")

  // Remove output hashing from JS
  config.output.filename = 'js/[name].js'

  // Remove output hashing from CSS
  const miniCssExtractPlugin = config.plugins[0];
  if (!miniCssExtractPlugin.options.filename === 'css/[name].[contenthash].css') {
    throw new Error('tried to modify CSS output config but first plugin options was not for CSS output')
  }
  miniCssExtractPlugin.options.filename = 'css/[name].css'
  miniCssExtractPlugin.options.chunkFilename = 'css/[name].css'

  // Log the config
  console.log(JSON.stringify(config, null, 2));
  return config;
};


module.exports = {
  mount: {
    public: {url: '/', static: true},
    src: {url: '/dist'},
  },
  plugins: [
    '@snowpack/plugin-svelte',
    '@snowpack/plugin-dotenv',
    '@snowpack/plugin-typescript',
    [
      '@snowpack/plugin-webpack',
      {
        extendConfig: modifyWebpackConfig
      }
    ],
  ],
  routes: [
    /* Enable an SPA Fallback in development: */
    // {"match": "routes", "src": ".*", "dest": "/index.html"},
  ],
  optimize: {
    /* Example: Bundle your final build: */
    // "bundle": true,
  },
  packageOptions: {
    /* ... */
  },
  devOptions: {
    /* ... */
  },
  buildOptions: {
    /* ... */
  },
};
